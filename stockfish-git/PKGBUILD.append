
## useful links
# https://stockfishchess.org/
# https://github.com/official-stockfish/Stockfish

## options
if [ -n "$_srcinfo" ] || [ -n "$_pkgver" ] ; then
  : ${_autoupdate:=false}
else
  : ${_autoupdate:=true}
fi

: ${_build_avx:=false}
: ${_build_git:=false}

unset _pkgtype
[[ "${_build_avx::1}" == "t" ]] && _pkgtype+="-avx"
[[ "${_build_git::1}" == "t" ]] && _pkgtype+="-git"

## basic info
_pkgname=stockfish
pkgname="$_pkgname${_pkgtype:-}"
pkgver=16.r248.gfcbb02ff
pkgrel=1
pkgdesc="A strong UCI chess engine"
url="https://github.com/official-stockfish/Stockfish"
arch=('x86_64' 'i686' 'armv7h' 'aarch64')
license=('GPL-3.0-only')

# main package
_main_package() {
  optdepends=(
    'chaotic-interfere: chaotic-aur interference tracker'
    'polyglot-winboard: xboard support'
  )

  if [[ "${_build_git::1}" == "t" ]] || [[ "${_build_avx::1}" == "t" ]] ; then
    provides+=(stockfish="${pkgver%%.r*}")
    conflicts+=(stockfish)
  fi

  if [ "${_build_git::1}" != "t" ] ; then
    _main_stable
  else
    _main_git
  fi
}

# stable package
_main_stable() {
  _update_version

  _pkgsrc="Stockfish-sf_$_pkgver"
  source+=("$_pkgname-$_pkgver.zip"::"$url/archive/sf_$_pkgver.zip")

  if [[ "${_autoupdate::1}" == "t" ]] ; then
    sha256sums+=('SKIP')
  else
    sha256sums+=('c3252184be37b7249b8c439ff1a78585c460aec533b8e5fb234b113f5bb48274')
  fi

  pkgver() {
    echo "${_pkgver:?}"
  }
}

# git package
_main_git() {
  makedepends+=('git')

  _pkgsrc="$_pkgname"
  source+=("$_pkgsrc"::"git+$url.git")
  sha256sums+=('SKIP')

  pkgver() {
    cd "$_pkgsrc"

    git describe --long --tags --abbrev=8 --match="sf_[0-9]*" \
      | sed -E 's/^[^0-9]*//;s/([^-]*-g)/r\1/;s/-/./g'
  }
}

## common functions
build() {
  if [ "${_build_avx::1}" == "t" ] ; then
    export CFLAGS="$(echo "$CFLAGS" | sed -E 's@(\s*-(march|mtune)=\S+\s*)@ @g;s@\s*-O[0-9]\s*@ @g;s@\s+@ @g') -march=x86-64-v3 -mtune=skylake -O3"
    export CXXFLAGS="$(echo "$CXXFLAGS" | sed -E 's@(\s*-(march|mtune)=\S+\s*)@ @g;s@\s*-O[0-9]\s*@ @g;s@\s+@ @g') -march=x86-64-v3 -mtune=skylake -O3"
  fi

  # aur/stockfish, aur/stockfish-git, and upstream stockfish build scripts
  # detect and force-enable cpu features, ignoring user CFLAGS and CXXFLAGS,
  # producing binaries that are unusable on some computers.
  #
  # The following replicates `make profile-build` without cpu-detection.
  cd "$_pkgsrc/src"
  _make=(make 'ARCH=" "')

  "${_make[@]}" net
  printf "\nStep 1/4. Building instrumented executable ...\n"
  mkdir -p profdir
  "${_make[@]}" \
    EXTRACXXFLAGS='-fprofile-generate=profdir' \
    EXTRALDFLAGS='-lgcov' \
    all

  printf "\nStep 2/4. Running benchmark for pgo-build ...\n"
  ./stockfish bench > PGOBENCH.out

  printf "\nStep 3/4. Building optimized executable ...\n"

  "${_make[@]}" objclean
  "${_make[@]}" \
    EXTRACXXFLAGS='-fprofile-use=profdir -fno-peel-loops -fno-tracer' \
    EXTRALDFLAGS='-lgcov' \
    all

  printf "\nStep 4/4. Deleting profile data ...\n"
  "${_make[@]}" profileclean
}

package() {
  cd "$_pkgsrc/src"
  make PREFIX="$pkgdir/usr" install
}

# update version
_update_version() {
  : ${_pkgver:=${pkgver%%.r*}}

  if [[ "${_autoupdate::1}" != "t" ]] ; then
    return
  fi

  local _response=$(curl -Ssf "$url/releases.atom")
  local _tag=$(
    printf '%s' "$_response" \
      | grep '/releases/tag/sf_[0-9]' \
      | sed -E 's@^.*/releases/tag/(.*)".*$@\1@' \
      | sort -rV | head -1
  )
  local _pkgver_new="${_tag#sf_}"

  # update _pkgver
  if [ "$_pkgver" != "${_pkgver_new:?}" ] ; then
    _pkgver="${_pkgver_new:?}"
  fi
}

# execute
_main_package


# options
if [ x"${_srcinfo::1}" == "xt" ] ; then
  : ${_autoupdate:=false}
elif [ -z "$_pkgver" ] ; then
  : ${_autoupdate:=true}
else
  : ${_autoupdate:=false}
fi

: ${_pkgtype:=stable}

# basic info
_pkgname="elixir"
pkgname="$_pkgname${_pkgtype:+-$_pkgtype}"
pkgver=1.15.7
pkgrel=1
pkgdesc="a functional meta-programming aware language built on top of the Erlang VM"
#url="https://elixir-lang.org"
url="https://github.com/elixir-lang/elixir"
license=('Apache' 'custom:EPL')
arch=('any')

# main package
_main_package() {
  _update_version

  depends=('erlang-nox')
  checkdepends=('git')
  optdepends=(
    'chaotic-interfere: chaotic-aur interference tracker'
  )

  conflicts=("$_pkgname=${pkgver:?}")
  provides=("$_pkgname")

  _pkgsrc="$_pkgname-${_pkgver:?}"
  source=("$_pkgsrc.tar.gz::https://github.com/elixir-lang/elixir/archive/v$_pkgver.tar.gz")
  sha256sums=('SKIP')
}

# common functions
pkgver() {
  printf '%s' "${_pkgver//-rc./rc}"
}

build() {
  cd "$_pkgsrc"
  make
}

package() {
  cd "$_pkgsrc"
  install -Dm644 "LICENSE" -t "$pkgdir/usr/share/licenses/$pkgname"
  make DESTDIR="$pkgdir" PREFIX=/usr install
}

# update version
_update_version() {
  : ${_pkgver:=$pkgver}

  if [[ x"${_autoupdate::1}" != "xt" ]] ; then
    return
  fi

  _repo="${url#*//*/}"
  _response=$(curl -Ssf "https://api.github.com/repos/${_repo:?}/releases")

  _get() {
    printf '%s' "$_response" \
      | awk -F '"' '/"'"$1"'":/{print $4}' \
      | head -1 | sed 's/^v//'
  }
  _pkgver_new=$(_get name)

  # update _pkgver
  if [[ "${_pkgver_new:?}" =~ ^[0-9\.]$ ]]; then
    if [ x"$_pkgver" != x"${_pkgver_new:?}" ] ; then
      _pkgver="${_pkgver_new:?}"
    fi
  else
    echo "Error: release candidate or other unusual version detected"
    _pkgver=""
  fi
}

# execute
_main_package

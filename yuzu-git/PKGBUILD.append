
_pkgname="yuzu"
pkgname="$_pkgname-git"
pkgver=r25612.43be2bfe3
pkgrel=1
pkgdesc='An experimental open-source emulator for the Nintendo Switch'
url="https://github.com/yuzu-emu/yuzu"
license=('GPL2')
arch=('i686' 'x86_64')

depends=(
  'boost-libs'
  'cubeb'
  'enet'
  'fmt'
  'libinih'
  'mbedtls'
  'qt5-multimedia'
  'qt5-webengine'
  'sdl2'
)
makedepends=(
  'boost'
  'catch2'
  'cmake'
  'ffmpeg'
  'gcc'
  'git'
  'glslang'
  'llvm'
  'mold'
  'ninja'
  'nlohmann-json'
  'qt5-tools'
  'rapidjson'
  'robin-map'
  'spirv-headers'
  'vulkan-headers'
)
optdepends=(
  'chaotic-interfere: chaotic-aur interference tracker'
  "qt5-wayland: Wayland support"
)

provides=("$_pkgname")
conflicts=("$_pkgname")

_pkgsrc="$_pkgname"
source=(
  "$_pkgsrc"::"git+$url.git"

  # submodules for yuzu
  'SDL'::'git+https://github.com/libsdl-org/SDL.git'
  'Vulkan-Headers'::'git+https://github.com/KhronosGroup/Vulkan-Headers.git'
  'VulkanMemoryAllocator'::'git+https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git'
  'cpp-httplib'::'git+https://github.com/yhirose/cpp-httplib.git'
  'cpp-jwt'::'git+https://github.com/arun11299/cpp-jwt.git'
  'cubeb'::'git+https://github.com/mozilla/cubeb.git'
  'dynarmic'::'git+https://github.com/merryhime/dynarmic.git'
  'enet'::'git+https://github.com/lsalzman/enet.git'
  'ffmpeg'::'git+https://github.com/FFmpeg/FFmpeg.git'
  'inih'::'git+https://github.com/benhoyt/inih.git'
  'libadrenotools'::'git+https://github.com/bylaws/libadrenotools.git'
  'libusb'::'git+https://github.com/libusb/libusb.git'
  'opus'::'git+https://github.com/xiph/opus.git'
  'tzdb_to_nx'::'git+https://github.com/lat9nq/tzdb_to_nx.git'
  'vcpkg'::'git+https://github.com/microsoft/vcpkg.git'
  'xbyak'::'git+https://github.com/herumi/xbyak.git'
  'yuzu-discord-rpc'::'git+https://github.com/yuzu-emu/discord-rpc.git'
  'yuzu-mbedtls'::'git+https://github.com/yuzu-emu/mbedtls.git'
  'yuzu-sirit'::'git+https://github.com/yuzu-emu/sirit.git'

  # submodules for cubeb
  'googletest'::'git+https://github.com/google/googletest.git'
  'sanitizers-cmake'::'git+https://github.com/arsenm/sanitizers-cmake.git'

  # submodules for sirit
  'SPIRV-Headers'::'git+https://github.com/KhronosGroup/SPIRV-Headers.git'

  # submodules for libadrenotools
  'linkernsbypass'::'git+https://github.com/bylaws/liblinkernsbypass.git'

  # submodules for tzdb_to_nx
  'tz'::'git+https://github.com/eggert/tz.git'
)
sha256sums=(
  'SKIP'

  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'

  'SKIP'
  'SKIP'

  'SKIP'

  'SKIP'

  'SKIP'
)

pkgver() {
  cd "$_pkgsrc"
  printf 'r%s.%s' \
    "$(git rev-list --count HEAD)" \
    "$(git rev-parse --short HEAD)"
}

prepare() {
  cd "$_pkgsrc"

  (
    # submodules for yuzu-
    local -A _submodules=(
      ['SDL']='externals/SDL'
      ['Vulkan-Headers']='externals/Vulkan-Headers'
      ['VulkanMemoryAllocator']='externals/VulkanMemoryAllocator'
      ['cpp-httplib']='externals/cpp-httplib'
      ['cpp-jwt']='externals/cpp-jwt'
      ['cubeb']='externals/cubeb'
      ['dynarmic']='externals/dynarmic'
      ['enet']='externals/enet'
      ['ffmpeg']='externals/ffmpeg/ffmpeg'
      ['inih']='externals/inih/inih'
      ['libadrenotools']='externals/libadrenotools'
      ['libusb']='externals/libusb/libusb'
      ['opus']='externals/opus/opus'
      ['tzdb_to_nx']='externals/nx_tzdb/tzdb_to_nx'
      ['vcpkg']='externals/vcpkg'
      ['xbyak']='externals/xbyak'
      ['yuzu-discord-rpc']='externals/discord-rpc'
      ['yuzu-mbedtls']='externals/mbedtls'
      ['yuzu-sirit']='externals/sirit'
    )
     for key in ${!_submodules[@]} ; do
      git submodule init "${_submodules[${key}]}"
      git submodule set-url "${_submodules[${key}]}" "${srcdir}/${key}"
      git -c protocol.file.allow=always submodule update "${_submodules[${key}]}"
    done
  )
  (
    # submodules for cubeb
    cd "externals/cubeb"
    local -A _submodules=(
      ['googletest']='googletest'
      ['sanitizers-cmake']='cmake/sanitizers-cmake'
    )
     for key in ${!_submodules[@]} ; do
      git submodule init "${_submodules[${key}]}"
      git submodule set-url "${_submodules[${key}]}" "${srcdir}/${key}"
      git -c protocol.file.allow=always submodule update "${_submodules[${key}]}"
    done
  )
  (
    # submodules for sirit
    cd "externals/sirit"
    local -A _submodules=(
      ['SPIRV-Headers']='externals/SPIRV-Headers'
    )
     for key in ${!_submodules[@]} ; do
      git submodule init "${_submodules[${key}]}"
      git submodule set-url "${_submodules[${key}]}" "${srcdir}/${key}"
      git -c protocol.file.allow=always submodule update "${_submodules[${key}]}"
    done
  )
  (
    # submodules for libadrenotools
    cd "externals/libadrenotools"
    local -A _submodules=(
      ['linkernsbypass']='lib/linkernsbypass'
    )
     for key in ${!_submodules[@]} ; do
      git submodule init "${_submodules[${key}]}"
      git submodule set-url "${_submodules[${key}]}" "${srcdir}/${key}"
      git -c protocol.file.allow=always submodule update "${_submodules[${key}]}"
    done
  )
  (
    # submodules for tzdb_to_nx
    cd "externals/nx_tzdb/tzdb_to_nx"
    local -A _submodules=(
      ['tz']='externals/tz/tz'
    )
     for key in ${!_submodules[@]} ; do
      git submodule init "${_submodules[${key}]}"
      git submodule set-url "${_submodules[${key}]}" "${srcdir}/${key}"
      git -c protocol.file.allow=always submodule update "${_submodules[${key}]}"
    done
  )
}

build() {
  local _cmake_options=(
    -S "$_pkgsrc"
    -B build
    -GNinja
    -DCMAKE_INSTALL_PREFIX="/usr"
    -DCMAKE_C_COMPILER="gcc"
    -DCMAKE_CXX_COMPILER="g++"
    -DCMAKE_C_FLAGS="$CFLAGS"
    -DCMAKE_CXX_FLAGS="$CXXFLAGS"
    -DCMAKE_BUILD_TYPE="Release"

    -DYUZU_DOWNLOAD_TIME_ZONE_DATA=ON
    -DYUZU_ENABLE_LTO=ON
    -DYUZU_TESTS=OFF
    -DYUZU_USE_BUNDLED_FFMPEG=OFF
    -DYUZU_USE_BUNDLED_QT=OFF
    -DYUZU_USE_FASTER_LD=OFF
    -DYUZU_USE_EXTERNAL_SDL2=OFF
    -DYUZU_USE_EXTERNAL_VULKAN_HEADERS=OFF
    -DYUZU_USE_QT_MULTIMEDIA=ON
    -DYUZU_USE_QT_WEB_ENGINE=ON
    -DENABLE_QT6=OFF
    -DENABLE_QT_TRANSLATION=ON
    -DUSE_DISCORD_PRESENCE=ON
    -DSIRIT_USE_SYSTEM_SPIRV_HEADERS=ON

    -DBUILD_REPOSITORY=yuzu-emu/yuzu
    -DBUILD_TAG="${pkgver}"
    -DTITLE_BAR_FORMAT_IDLE="yuzu | ${pkgver} {}"
    -DTITLE_BAR_FORMAT_RUNNING="yuzu | ${pkgver} | {}"
    -Wno-dev

    -DDYNARMIC_NO_BUNDLED_ROBIN_MAP=ON
    -DENABLE_COMPATIBILITY_LIST_DOWNLOAD=ON
    -DYUZU_USE_BUNDLED_LIBUSB=OFF
    -DYUZU_USE_BUNDLED_OPUS=OFF
  )

  cmake "${_cmake_options[@]}"
  cmake --build build
}

package() {
  DESTDIR="${pkgdir:?}" cmake --install build
}
